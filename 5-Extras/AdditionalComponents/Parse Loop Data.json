{"id":"98b1bd86-9251-4e45-be43-4e24df06803f","name":"Parse Loop Data","data":{"edges":[],"nodes":[{"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\r\nfrom langflow.helpers.data import data_to_text\r\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\r\nfrom langflow.schema.message import Message, Data\r\n\r\nclass ParseDataComponent(Component):\r\n    display_name = \"Parse Data\"\r\n    description = \"Convert Data into plain text following a specified template.\"\r\n    icon = \"braces\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\r\n        MultilineInput(\r\n            name=\"template\",\r\n            display_name=\"Template\",\r\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\r\n            value=\"{text}\",\r\n        ),\r\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\r\n    ]\r\n\r\n    def parse_data(self) -> list[Message]:\r\n        data = self.data if isinstance(self.data, list) else [self.data]\r\n        template = self.template\r\n\r\n        messages = []\r\n        for item in data:\r\n            result_string = data_to_text(template, [item], sep=self.sep)\r\n            messages.append(Message(text=result_string))\r\n\r\n        self.status = messages\r\n        return messages\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Loop Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":true,"official":false},"id":"ParseData-yN6xb","description":"Convert Data into plain text following a specified template.","display_name":"Parse Data"},"id":"ParseData-yN6xb","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true}